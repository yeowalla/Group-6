#include <stdio.h>
#include <time.h>

extern "C" int init(int d_lev);
extern "C" int Sleep(int sec, int usec);
extern "C" int set_motor(int motor, int speed);
extern "C" int take_picture();
extern "C" char get_pixel(int row, int col, int colour);

extern "C" int connect_to_server( char server_addr[15],int port);
extern "C" int send_to_server(char message[24]);
extern "C" int receive_from_server(char message[24]);

#define ELEMENTS 320

int main(){
    init(0);

    int i;
    int j = 160;
    int reading;
    float pConstant = 0.39;					//Kp
    float dConstant = 0.00000000001;					//Kd
    double errorPeriod = 100;
    double errorSeconds = errorPeriod/1000000000;
    int motorConstant = 85;
    int blackWhite;
    int nwp;
    int average;
    int Xroad = 0;
    int oscFix = 0;

    int fixArray[ELEMENTS];
    	for (i=0; i<(ELEMENTS);i++){
    	fixArray[i] = j;
    	j--;
    	}

    int camArray[ELEMENTS];
    int errorArray[ELEMENTS];

    int errorSum = 0;
    int pSignal;
    int currentError = 0;
    int previousError = 0;
    int dSignal;
    int signalPID;
    int absPID;

    int leftMotor;
    int rightMotor;

  // connect_to_server("130.195.6.196", 1024);
  // send_to_server("Please");
  // char message[24];
  // receive_from_server(message);
  // printf("%s", message);
  // Sleep(5,0);

while(true){
		
    take_picture();
    nwp = 1;
     dSignal = (currentError-previousError)/(errorSeconds)*dConstant;	
    previousError = currentError;
    errorSum = 0;
														//number of white pixels
    for (i=0; i<320;i++){
       blackWhite = 0;
       reading = get_pixel(i, 120, 3);						//fills camera array
       if(reading > 126){ blackWhite = 1; nwp++;}		//cameraArray receives either a 0 or 1 based on whether
       camArray[i] = blackWhite;								//each of the numbers in the array are <> 128
    }

    for (i=0; i<320;i++){										//multiply fixed array and camera array
      errorArray[i] = fixArray[i]*camArray[i];			//and fills array with those results
    }


    for (i=0; i<320;i++){										//sums up all numbers in error array
      errorSum = errorSum + errorArray[i];				//and modifies the errorSum variable
    }
    average = errorSum/nwp;
    pSignal = average*pConstant;
  
    currentError = errorSum;
    signalPID = pSignal+dSignal;

    if (signalPID < 0){absPID = signalPID*(-1);}
                                                                                                                                                                                                                                                                                                                                                           else {absPID = signalPID;}

    //printf("P Signal is:  %d", pSignal);
    //printf("D Signal is:  %d", dSignal);
    //printf("PID Signal is:  %d", signalPID);
    //printf("NWP Signal is:  %d", nwp);

    printf("P: %04d, D: %04d, PIDSig: %04d, NWP: %04d, average: %04d\n", pSignal, dSignal, signalPID, nwp, average);


    if(nwp > 280 && Xroad == 0){
    		set_motor(1, 120);
    		set_motor(2, 120);
   		Sleep (0, 2500000);
   		Xroad++;
    }
    else if(nwp > 290 && Xroad == 1){
		set_motor(1, -255);
    		set_motor(2, 255);
   		Sleep (0, 600000);
   		Xroad++;
    }
    else if(oscFix == 30){
		set_motor(1, 255);
		set_motor(2,-255);
		Sleep (0, 1200000);
		oscFix = 0;
    }
    else if(average == 0){
	 		leftMotor = -100;
	 		rightMotor = -100;
			oscFix++;
    }
    else {
	 		if(average < 0){
	 			if(signalPID > 255){signalPID = 255;}
	 			if(signalPID < -255){signalPID = -255;}
	 			rightMotor = motorConstant+absPID;
	 			leftMotor = rightMotor/6;
				
	 		}
	 		else if(average > 0){
				if(signalPID > 255){signalPID = 255;}
	 			if(signalPID < -255){signalPID = -255;}
	 			leftMotor = motorConstant+absPID;
	 			rightMotor = leftMotor/6;
				
	 			}
    		else{
	 		leftMotor = motorConstant;
	 		rightMotor = motorConstant;
			
	 		}
    }

	 printf("leftMotor: %04d, rightMotor: %04d, Crossroad: %04d, oscFix: %04d\n", leftMotor, rightMotor, Xroad, oscFix);

    set_motor(1, leftMotor);
    set_motor(2, rightMotor);
    Sleep (0, errorPeriod);
  
}
return 0;
}

 
