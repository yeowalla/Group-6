#include <stdio.h>
#include <time.h>

extern "C" int init(int d_lev);
extern "C" int Sleep(int sec, int usec);
extern "C" int set_motor(int motor, int speed);
extern "C" int take_picture();
extern "C" char get_pixel(int row, int col, int colour);

extern "C" int connect_to_server( char server_addr[15],int port);
extern "C" int send_to_server(char message[24]);
extern "C" int receive_from_server(char message[24]);

#define ELEMENTS 320

int main(){
    init(0);

    int i;
    int j = 160;
    int reading;
    float pConstant = 0.95;					//Kp
    float dConstant = 0.099;					//Kd
    double errorPeriod = 1500;
    double errorSeconds = errorPeriod/1000000000;
    int motorConstant = 175;
    int blackWhite;
    int nwp;
    int average;


    int fixArray[ELEMENTS];
    	for (i=0; i<(ELEMENTS);i++){				//fills fixed array from -160 to 160
    	fixArray[i] = j;
    	j--;
    	}

    int camArray[ELEMENTS];
    int errorArray[ELEMENTS];

    int errorSum = 0;
    int pSignal;
    int currentError = 0;
    int previousError = 0;
    int dSignal;
    int signalPID;

    int leftMotor;
    int rightMotor;

  // connect_to_server("130.195.6.196", 1024);
  // send_to_server("Please");
  // char message[24];
  // receive_from_server(message);
  // printf("%s", message);
   //Sleep(5,0);

while(true){
		
    take_picture();
    nwp = 1;
    dSignal = (currentError-previousError)/(errorSeconds+1)*dConstant;	
    previousError = currentError;
    errorSum = 0;														//number of white pixels
    for (i=0; i<320;i++){
       blackWhite = 0;
       reading = get_pixel(i, 120, 3);						//fills camera array
       if(reading > 130){ blackWhite = 1; nwp++;}		//cameraArray receives either a 0 or 1 based on whether
       camArray[i] = blackWhite;								//each of the numbers in the array are <> 128
    }

    for (i=0; i<320;i++){										//multiply fixed array and camera array
      errorArray[i] = fixArray[i]*camArray[i];			//and fills array with those results
    }


    for (i=0; i<320;i++){										//sums up all numbers in error array
      errorSum = errorSum + errorArray[i];				//and modifies the errorSum variable
    }
    average = errorSum/nwp;
    pSignal = average*pConstant;
   	
    currentError = errorSum;
    signalPID = pSignal+dSignal;
    
    //printf("P Signal is:  %d", pSignal);
    //printf("D Signal is:  %d", dSignal);
    //printf("PID Signal is:  %d", signalPID);
    //printf("NWP Signal is:  %d", nwp); 
	
 	 printf("P: %04d, D: %04d, PIDSig: %04d, NWP: %04d\n", pSignal, dSignal, signalPID, nwp);
    
    if(average == 0){
	 leftMotor = -motorConstant/(2);
	 rightMotor = -motorConstant/(2);
    }
    else {
	 if(errorSum < 0){
	 	if(signalPID > 255){signalPID = 255;}
	 	if(signalPID < -255){signalPID = -255;}
	 	rightMotor = motorConstant+signalPID;
	 	leftMotor = rightMotor/10;
	 }
	 else if(errorSum > 0){
		if(signalPID > 255){signalPID = 255;}
	 	if(signalPID < -255){signalPID = -255;}
	 	leftMotor = motorConstant+signalPID;
	 	rightMotor = leftMotor/10;
	 }
    else{
		leftMotor = 255;
	 	rightMotor = 255;
	 }
	 }
    set_motor(1, leftMotor);
    set_motor(2, rightMotor);
    Sleep (0, errorPeriod);
  
}
return 0;
}
