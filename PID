#include <stdio.h>
#include <time.h>

extern "C" int init(int d_lev);
extern "C" int Sleep(int sec, int usec);
extern "C" int set_motor(int motor, int speed);
extern "C" int take_picture();
extern "C" char get_pixel(int row, int col, int colour);

extern "C" int connect_to_server(char server_addr[15], int port);
extern "C" int send_to_server(char message[24]);
extern "C" int receive_from_server(char message[24]);

#define ELEMENTS 320

int main(){
    //sets up the RPi hardware and checks
    //that everything is working correctly
    init(0);

    connect_to_server("130.195.6.196", 1024);
    send_to_server("Please");
    char message[24];
    receive_from_server(message);
    printf("%s", message);

	 int i;
	 int j = -160;
    int reading;
    float pConstant = 0.5;					//Kp
    float dConstant = 0.2;						//Kd
    float errorPeriod = 0.01;
    int motorConstant = 50;

    int fixArray[ELEMENTS];
    	for (i=0; i<(ELEMENTS);i++){					//fills fixed array from -160 to 160
    	fixArray[i] = j;
    	j++;
    	}

    int camArray[ELEMENTS];
    int errorArray[ELEMENTS];

    int errorSum = 0;
    int pSignal = errorSum*pConstant;
    int currentError = 0;
    int previousError = 0;
    int dSignal = ((currentError-previousError)/errorPeriod)*dConstant;
    int signalPID = pSignal+dSignal;

    double leftMotor;
    			if(leftMotor > 255){leftMotor = 255;}
    			if(leftMotor < (0-255)){leftMotor = (0-255);}
    double rightMotor = (0-1)*rightMotor;
    			if(rightMotor > 255){rightMotor = 255;}
				if(rightMotor < (0-255)){rightMotor = (0-255);}


while(true){

    take_picture();
    int nwp = 0;															//number of white pixels
    int blackWhite;
    for (i=0; i<ELEMENTS;i++){
       blackWhite = 0;
       reading = get_pixel(i, 120, 3);								//fills camera array
       if(reading > 128){ blackWhite = 1; nwp++;}				//cameraArray receives either a 0 or 1 based on whether
       camArray[i] = blackWhite;										//each of the numbers in the array are <> 128
    }

    for (i=0; i<ELEMENTS;i++){										//multiply fixed array and camera array
      errorArray[i] = fixArray[i]*camArray[i];					//and fills array with those results
    }


    for (i=0; i<ELEMENTS;i++){										//sums up all numbers in error array
      errorSum = errorSum + errorArray[i];						//and modifies the errorSum variable
    }
    errorSum = errorSum/nwp;
    previousError = currentError;									//These two statements for calculating derivative signal
    currentError = errorSum;


    if(nwp > 0){
            if(signalPID < 0){
                leftMotor = motorConstant/signalPID;
                rightMotor = motorConstant+signalPID;
                }
                else if(signalPID > 0){
                leftMotor = motorConstant+signalPID;
                rightMotor = motorConstant/signalPID;
                }
                else {leftMotor = 50; rightMotor = 50;}
    }
    if(nwp = 0) {leftMotor = -50; rightMotor = -50;}

    set_motor(1, leftMotor);
    set_motor(2, rightMotor);

    Sleep (0, errorPeriod*100000);
    }

}
